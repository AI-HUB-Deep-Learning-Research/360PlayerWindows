//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bivrost.Bivrost360Player.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Bivrost.Bivrost360Player.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Licence for Non-Commercial
        ///Use of Bivrost Desktop
        ///rev. as of 2015-11-25
        ///
        ///Section 1
        ///For the purposes of this licence, the following terms are defined as follows:
        ///1) Bivrost Desktop – computer software created by the Bivrost Developer, used for displaying panoramic videos; Bivrost Desktop offers features and specifications listed in its Documentation; to be operational, Bivrost Desktop requires third-party software listed in the Documentation, specifically: an operating system, drivers and libraries;
        ///2) Docum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EULA {
            get {
                return ResourceManager.GetString("EULA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Third party components:
        ///
        ///SharpDX 2.6.3 is under the MIT license.
        ///Caliburn Micro 2.0.1 is under the MIT license.
        ///HTML Agility Pack 1.4.9 is under the Microsoft Public License (Ms-PL).
        ///Newtonsoft Json 6.0 is under the MIT license.
        ///RestSharp 105.0.1 is under the Apache License Version 2.0.
        ///SharpVectors 1.0 is under the New BSD License (BSD).
        ///OculusWrap 1.6.0.2 is under the Microsoft Public License (Ms-PL).
        ///Nancy 1.2 and Nancy.Hosting.Self 1.2 are under the MIT license.
        ///Fleck 0.13.0.57 is under the MIT license. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EulaLibs {
            get {
                return ResourceManager.GetString("EulaLibs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //reuse//code//ApplyAnEffectFxFile//
        ///uniform extern float4x4 WorldViewProj : WORLDVIEWPROJECTION;
        ///extern float gammaFactor;
        ///
        ////////////////
        ///// GLOBALS //
        ////////////////
        /////matrix worldMatrix;
        /////matrix viewMatrix;
        /////matrix projectionMatrix;
        ///
        /////float4 AmbientColor = float4(1, 1, 1, 1);
        ///
        /////////////////
        ///// TYPEDEFS //
        /////////////////
        ///struct VertexInputType
        ///{
        ///    float4 Position : SV_Position;
        ///    float3 Normal : NORMAL;
        ///    float2 TexCoord : TEXCOORD0;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GammaShader {
            get {
                return ResourceManager.GetString("GammaShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon icon_ghostvr {
            get {
                object obj = ResourceManager.GetObject("icon_ghostvr", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //reuse//code//ApplyAnEffectFxFile//
        ///uniform extern float4x4 WorldViewProj : WORLDVIEWPROJECTION;
        ///extern float gammaFactor;
        ///
        ////////////////
        ///// GLOBALS //
        ////////////////
        /////matrix worldMatrix;
        /////matrix viewMatrix;
        /////matrix projectionMatrix;
        ///
        /////float4 AmbientColor = float4(1, 1, 1, 1);
        ///
        /////////////////
        ///// TYPEDEFS //
        /////////////////
        ///struct VertexInputType
        ///{
        ///    float4 Position : SV_Position;
        ///    float3 Normal : NORMAL;
        ///    float2 TexCoord : TEXCOORD0;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///    float4 position : SV_POSITION;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImageBasedLightEquirectangular {
            get {
                return ResourceManager.GetString("ImageBasedLightEquirectangular", resourceCulture);
            }
        }
    }
}
